version: 2.1
executors:
  builder:
    docker:
      - image: aeternity/builder
        user: builder
    resource_class: large
    working_directory: ~/aeternity
    environment:
      OTP_VERSION: 20.3.8

commands:
  checkout_node:
    steps:
      - run:
          name: Checkout aeternity node repository
          command: |
            git clone https://github.com/aeternity/aeternity.git .
  save_build_cache:
    steps:
      - save_cache:
          key: build-cache-v1-{{ .Revision }}
          paths:
            - "_build"
      - save_cache:
          key: quickcheck-cache-v1-{{ .Revision }}
          paths:
            - "eqc-lib/eqc.zip"
  restore_build_cache:
    steps:
      - restore_cache:
          keys:
            - build-cache-v1-{{ .Revision }}
            - quickcheck-cache-v1-{{ .Revision }}
  quickcheck_tests:
    parameters:
      multiplier:
        type: integer
    steps:
      - run:
          name: QuickCheck Registration
          command: |
            make eqc-lib-registration && make eqc-lib-start
      - run:
          name: QuickCheck Tests
          environment:
            EQC_EUNIT_TESTING_TIME_MULTIPLIER: << parameters.multiplier >>
          command: |
            # QuickCheck test terget uses git magic to source the dependancy and it needs a user
            git config --global user.email "ci@aeternity.com"
            git config --global user.name "Aeternity CI"
            make eqc-lib-test
  fail_notification:
    steps:
      - run:
          name: Send failure notification
          environment:
            HOOK_TEMPLATE: |
              {
                "text": "CircleCI job **%s** failed on branch **%s** by @%s",
                "attachments": [
                  {
                    "title": "Build Link",
                    "title_link": "%s",
                    "color": "#FAD6D6"
                  }
                ]
              }
          command: |
            HOOK_DATA=$(printf "$HOOK_TEMPLATE" "${CIRCLE_JOB:?}" "${CIRCLE_BRANCH:?}" "${CIRCLE_USERNAME:-unknown}" "${CIRCLE_BUILD_URL:?}")
            curl -X POST -H 'Content-Type: application/json' ${ROCKET_HOOK_URL:?} --data "${HOOK_DATA:?}"
          when: on_fail

jobs:
  quickcheck_tests:
    parameters:
      multiplier:
        description: |
          QuickCheck time multiplier.
        type: integer
        default: 40
    executor: builder
    steps:
      - checkout_node
      - restore_build_cache
      - quickcheck_tests:
          multiplier: << parameters.multiplier >>
      - save_build_cache
      - fail_notification

workflows:
  fast_quickcheck:
    jobs:
      - quickcheck_tests:
          requires: []
          multiplier: 4

  property_based_tests:
    triggers:
      - schedule:
          cron: "0 0,12 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - quickcheck_tests
